<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--程序会打印高于或等于所设置级别的日志，设置的日志等级越高，打印出来的日志就越少。-->

<!--status用来指定log4j本身的打印日志的级别-->
<!--monitorInterval 用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s-->
<configuration status="OFF">
    <appenders>
        <!--Console节点用来定义输出到控制台的Appender-->
        <!--1. name:指定Appender的名字 2. target:SYSTEM_OUT 或 SYSTEM_ERR,一般只设置默认:SYSTEM_OUT-->
        <Console name="Console" target="SYSTEM_OUT">
            <!--PatternLayout:输出格式，不设置默认为:%m%n-->
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
        </Console>

        <!--File节点用来定义输出到指定位置的文件的Appender-->
        <!--1. name:指定Appender的名字 2.fileName:指定输出日志的目的文件带全路径的文件名-->
        <File name="File" fileName="D:/log/File.log">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
        </File>

        <!--RollingFile节点用来定义超过指定大小自动删除旧的创建新的的Appender-->
        <!--1. name:指定Appender的名字 2.fileName:指定输出日志的目的文件带全路径的文件名 3. 指定新建日志文件的名称格式-->
        <RollingFile name="RollingFile" fileName="D:/log/RollingFile.log" filePattern="D:/log/$${date:yyyy-MM}/RollingFile-%d{yyyy-MM-dd}-%i.log">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>

            <!--Policies:指定滚动日志的策略，就是什么时候进行新建日志文件输出日志-->
            <!--多个策略是或的关系，有一个出发就进行rollover-->
            <Policies>
                <!--TimeBasedTriggeringPolicy:基于时间的滚动策略-->
                <!--1. interval属性用来指定多久滚动一次，默认是1，时间单位从filePattern中的最小时间粒度 2. modulate是否对interval进行调节，默认为false。若modulate为true，会以0为开始对interval进行偏移计算。-->
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />

                <!--SizeBasedTriggeringPolicy:基于指定文件大小的滚动策略-->
                <!--1. size属性用来定义每个日志文件的大小-->
                <SizeBasedTriggeringPolicy size="100 MB"/>

                <!--DefaultRolloverStrategy是Log4j2提供的默认的rollover策略，没有显示配置也起作用。DefaultRolloverStrategy默认的max为7。计数达到最大值将删除最旧的文件-->
                <!--max参数是与filePattern中的计数器%i配合起作用的，其具体作用方式与filePattern的配置密切相关。

                1. 如果filePattern中仅含有date/time pattern，每次rollover时，将用当前的日期和时间替换文件中的日期格式对文件进行重命名。max参数将不起作用。
                如，filePattern="logs/app-%d{yyyy-MM-dd}.log"
                2.如果filePattern中仅含有整数计数器（即%i），每次rollover时，文件重命名时的计数器将每次加1（初始值为1），若达到max的值，将删除旧的文件。
                如，filePattern="logs/app-%i.log"
                3.如果filePattern中既含有date/time pattern，又含有%i，每次rollover时，data/time pattern相同时间内超过次数，会删除最旧的文件。进入新date/time pattern后，计数器再从1开始。
                如，filePattern="logs/app-%d{yyyy-MM-dd HH-mm}-%i.log"-->
                <DefaultRolloverStrategy max="7"/>
            </Policies>
        </RollingFile>
    </appenders>


    <loggers>
        <!--Root节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出-->
        <!--1. level:日志输出级别-->
        <root level="error">
            <!--AppenderRef：Root的子节点，用来指定该日志输出到哪个Appender-->
            <appender-ref ref="Console"/>
        </root>

        <!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。-->
        <!--1. level:日志输出级别 2. name:用来指定该Logger所适用的类或者类所在的包全路径,继承自Root节点.-->
        <logger name="org.springframework" level="INFO">
            <!--AppenderRef：Logger的子节点，用来指定该日志输出到哪个Appender。
            1. 如果没有指定，就会默认继承自Root。
            2. 如果指定了，那么会在指定的这个Appender和Root的Appender中都会输出，此时我们可以设置Logger的additivity="false"只在自定义的Appender中进行输出。-->
            <appender-ref ref="RollingFile"/>
        </logger>


    </loggers>
</configuration>